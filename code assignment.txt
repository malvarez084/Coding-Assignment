/**
 * Day 9: Stream Processing
 * Manuel Alvarez Cervantes
 */
 
class StreamProcessing(private val input: String) {

    private val cancel = "!.".toRegex()
    private val garbage = "<.*?>".toRegex()
    private val nonGroup = "[^{}]".toRegex()

    private val cleanInput = input.replace(cancel, "")

    fun solve(): Int =
        scoreGroups(cleanInput.replace(garbage, "").replace(nonGroup, "").toList())

    private tailrec fun scoreGroups(stream: List<Char>, score: Int = 0, depth: Int = 1): Int =
        when {
            stream.isEmpty() -> score
            stream.first() == '}' -> scoreGroups(stream.drop(1), score, depth - 1)
            else -> scoreGroups(stream.drop(1), score + depth, depth + 1)
        }
}